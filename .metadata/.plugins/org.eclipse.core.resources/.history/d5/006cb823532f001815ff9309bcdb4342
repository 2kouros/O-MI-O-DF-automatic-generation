package core;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;


import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.ontology.OntResource;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.Statement;
import org.apache.jena.reasoner.Reasoner;
import org.apache.jena.reasoner.ReasonerRegistry;
import org.apache.jena.util.FileManager;
import org.apache.jena.util.iterator.ExtendedIterator;

public class JenaReasoner {
	private static final String filename="C:\\Users\\Kristi.KristianKuro-PC\\Desktop\\IdenticalObject.owl";
	private static final	ArrayList<String> description= new ArrayList<String>();
	
    public static  void sparqlQuery(String id) {
    	
    	String object=determiner(id);
        FileManager.get().addLocatorClassLoader(JenaReasoner.class.getClassLoader());
        Model model = FileManager.get().loadModel(filename);
         
        String queryString = 
                "PREFIX sosa: <http://www.w3.org/ns/sosa/> " +
        		"SELECT ?Sensor ?result ?observable "
        		
        		+ "WHERE { " 
                		
        		+ "?Sensor sosa:isHostedBy ?Platform . "
        		+ "?Sensor  sosa:hasSimpleResult ?result ."
        		+ "?Sensor sosa:observes ?observable ."
        		+ "FILTER (STR(?Platform) = \"http://www.semanticweb.org/kristian/ontologies/2018/2/IdenticalObject#" + object + "\") . " +
				"}";

        		
        		
        Query query = QueryFactory.create(queryString);
        QueryExecution qexec = QueryExecutionFactory.create(query, model);
        try {
            ResultSet results = qexec.execSelect();
            while ( results.hasNext() ) {
             QuerySolution soln = results.nextSolution(); 
               
              Iterator<String> itVars = soln.varNames();

                while (itVars.hasNext()) {
                	
                               String szVar = itVars.next().toString();
                               String szVal = soln.get(szVar).toString();
                              String result=szVal.substring(szVal.lastIndexOf("#")+1);
                              description.add(result);
                               }
                           
            
            }
        } 
        finally {
            qexec.close();
        }
		

    }
    
   
    
public static String determiner(String id) {
		
    	boolean individual;
    	
    	OntModel ontModel = ModelFactory.createOntologyModel();
        InputStream in = FileManager.get().open(filename);
        if (in == null) {
            throw new IllegalArgumentException( "File: " + filename + " not found");
        }
        ontModel.read(in, "");


        Reasoner reasoner = ReasonerRegistry.getOWLReasoner();
        reasoner = reasoner.bindSchema(ontModel);
        // Obtain standard OWL-DL spec and attach the Pellet reasoner
        OntModelSpec ontModelSpec = OntModelSpec.OWL_DL_MEM;
        ontModelSpec.setReasoner(reasoner);
        // Create ontology model with reasoner support
        OntModel model = ModelFactory.createOntologyModel(ontModelSpec, ontModel);
        
        Property property= model.createProperty("hosts");
        Property sameAs=model.createProperty("sameAs");
        Individual individ=model.getIndividual("http://www.semanticweb.org/kristian/ontologies/2018/2/IdenticalObject#" + id);
        OntResource same= individ.getSameAs();
       
	if( individ.hasProperty(property)==false && same != null && !same.equals(individ))
    {  
		
		id=same.getLocalName();
		System.out.println(id);
		}
	
    return id;	
    
    }
public static ArrayList<String> getList() {
	return description;
	}
}

